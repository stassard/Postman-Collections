{
	"info": {
		"_postman_id": "1b440051-b0a2-4ad0-a8ad-f82cf44fba36",
		"name": "MyLibrary",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30245883"
	},
	"item": [
		{
			"name": "AddBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"flag\", false);\r",
							"const jsonData = pm.response.json();\r",
							"const isbn_val = pm.collectionVariables.get(\"isbn\");\r",
							"var req = JSON.parse(pm.request.body.raw);\r",
							"pm.environment.set(\"book_id\", jsonData.ID);\r",
							"\r",
							"function cleanupScript() \r",
							"{\r",
							"    const book_id = generateBookId();\r",
							"    pm.environment.set(\"book_id\", book_id)\r",
							"    pm.collectionVariables.set(\"flag\", true);\r",
							"    postman.setNextRequest(\"DeleteBook\");\r",
							"}\r",
							"\r",
							"function generateBookId()\r",
							"{\r",
							"   const expected_id = req.isbn + req.aisle;\r",
							"   return expected_id;\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"\r",
							"    try \r",
							"    {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.expect(jsonData).to.have.property(\"Msg\");\r",
							"        pm.expect(jsonData.Msg).to.eql(\"successfully added\");\r",
							"    }\r",
							"    catch(err)\r",
							"    {\r",
							"        if(jsonData.Msg.includes(\"Exists\"))\r",
							"        {\r",
							"            cleanupScript();\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Book is successfully added\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"successfully added\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID logic validation\", function () {\r",
							"    const expected_id = generateBookId();\r",
							"    pm.expect(expected_id).to.eql(jsonData.ID);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const code = pm.globals.get(\"companyCode\");\r",
							"const val = pm.variables.replaceIn('{{$randomInt}}');\r",
							"pm.collectionVariables.set(\"isbn\", code + val);\r",
							"\r",
							"\r",
							"// Get ID and author name from variables - dynamically generated values\r",
							"\r",
							"pm.collectionVariables.set(\"author_name\", \"Stanley Cooper\");\r",
							"pm.collectionVariables.set(\"book_name\", \"Titans\");\r",
							"\r",
							"\r",
							"// Data driven testing with CSV files\r",
							"\r",
							"// pm.collectionVariables.set(\"book_name\", pm.iterationData.get(\"BookName\"));\r",
							"// pm.collectionVariables.set(\"author_name\", pm.iterationData.get(\"Author\"));\r",
							"\r",
							"console.log(pm.collectionVariables.get(\"book_name\"));\r",
							"console.log(pm.collectionVariables.get(\"author_name\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"name\":\"{{book_name}}\",\r\n \"isbn\":\"{{isbn}}\",\r\n \"aisle\":\"245796\",\r\n \"author\":\"{{author_name}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getResponseData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    'title': 'Generated schema for Root',\r",
							"    'type': 'array',\r",
							"    'items': {\r",
							"        'type': 'object',\r",
							"        'properties': {\r",
							"            'book_name': { 'type': 'string' },\r",
							"            'isbn': { 'type': 'string' },\r",
							"            'aisle': { 'type': 'string' },\r",
							"            'author': { 'type': 'string' }\r",
							"        },\r",
							"        'required': [\r",
							"            'book_name',\r",
							"            'isbn',\r",
							"            'aisle',\r",
							"            'author'\r",
							"        ]\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct author name\", function () {\r",
							"  pm.expect(getResponseData[0].author).to.eql(pm.collectionVariables.get(\"author_name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Validate JSON response schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{book_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBook",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"const schema = {\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"msg\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"msg\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"if(pm.collectionVariables.get(\"flag\"))\r",
							"{\r",
							"    postman.setNextRequest(\"AddBook\");\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response message\", function () {\r",
							"pm.expect(jsonData.msg).to.eql(\"book is successfully deleted\");\r",
							"});\r",
							"\r",
							"pm.test('Correct JSON response schema', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"ID\":\"{{book_id}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "fhjygh227",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "author_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "book_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "author_name2",
			"value": "",
			"type": "string"
		},
		{
			"key": "flag",
			"value": "false",
			"type": "string"
		}
	]
}